<?php
/**
 * @file
 * Install profile for Collabco.
 */
/**
 * Implement hook_install().
 *
 * Perform actions to set up the site for this profile.
 */


require_once 'modules/meta/meta_debug/meta_debug.module';
alexar_debug();

//  _collabco_debug('test debug.');


function collabco_install() {
}


/**
 * Implements hook_install_tasks().
 * copyright: best practices comes by commons profile
 */
function collabco_install_tasks() {
  //make sure we have more memory than 196M. if not lets try to increase it.
  if (ini_get('memory_limit') != '-1' && ini_get('memory_limit') <= '196M' && ini_get('memory_limit') >= '128M') {
    ini_set('memory_limit', '196M');
  }

  // this way we can control it later via different tools
  $demo_content = variable_get('collabco_install_example_content', FALSE);

  return array(
    '_collabco_set_theme' => array(
      'display' => FALSE,
    )
    , '_collabco_create_intro_node' => array(
      'display' => FALSE,
    )
    , '_collabco_install_demo_content' => array(
      'display' => FALSE,
    )
    , '_collabco_finilise' => array(
      'display' => FALSE,
    )
  );

// 'run' => $acquia_connector ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
// &$install_state
}

function _collabco_create_intro_node() {
  $node = new stdClass();
  $node->type = 'news_update';
  node_object_prepare($node);

  $node->title = 'Welcome please introduce yourself';
  $user = user_load(1);
  $node->uid = $user->uid;
  $node->language = LANGUAGE_NONE;
  $node->created = time() - 5400;
  $node->body[LANGUAGE_NONE][0]['value'] = "
  <p><em><strong>UPDATED: 3 September 2013</strong></em></p>
<p>Hi everyone,</p>
<p>It is great to have you as part of the META Community. &nbsp;Welcome to the Join the Conversation area of the member site. &nbsp;This part of site allows you&nbsp;to easily and freely&nbsp;communicate&nbsp;to other META members and give your feedback to us.&nbsp;</p>
<p>I invite you to join me in a conversation about the&nbsp;Services we would like to offer members. &nbsp;Just make a comment on which services you would find most valuable to your organisation.&nbsp;</p>
<p>Be honest, make a comment, in the spirit of open collaboration I've invited my META team to be a part of the conversation also - you will hear from them too.</p>
<p>Thanks again for joining the META network and thanks for joining in on our conversation.</p>
<p>Albert.</p>
";
  $node->body[LANGUAGE_NONE][0]['format'] = 'full_html';
  node_save($node);
  variable_set('collabco_intro_node', $node->nid);
}
function _collabco_set_theme() {
  $enable = array(
    'theme_default' => 'custom_theme',
    'admin_theme' => 'seven',
  );
  theme_enable($enable);

  foreach ($enable as $var => $theme) {
    if (!is_numeric($var)) {
      variable_set($var, $theme);
    }
  }
  // Disable the default Bartik theme
  theme_disable(array('bartik'));

}
function _collabco_finilise() {
  drupal_flush_all_caches();
  node_access_rebuild();
}
function _collabco_install_demo_content() {
  //_collabco_generate_demo_content();
  _collabco_generate_demo_content_topic();
}

/**
 * This function generates demo content.
 */
function _collabco_generate_demo_content_topic() {
  // node: Best brunch places in Cambridge
  $node = new stdClass();
  $node->type = 'conversation';
  node_object_prepare($node);

  $node->title = 'Best brunch places in Cambridge';
  $user = user_load(1);
  $node->uid = $user->uid;
  $node->language = LANGUAGE_NONE;
  // 1:30 ago.
  $node->created = time() - 5400;
  $node->body[LANGUAGE_NONE][0]['value'] = "My aunt and I have been trying a lot of brunch places in Cambridge. Here's our favorites: <ul><li>North Street Grille for their breads
<li>Mixtura for the souffles
<li>The Neighborhood Restaurant for the vast quantities of food
<li>City Girl Cafe for the ambiance <li>Bom Cafe for granola";
  $node->body[LANGUAGE_NONE][0]['format'] = filter_default_format();


  node_save($node);
}


function _collabco_generate_demo_content() {
  // Reset the Flag cache.
  flag_get_flags(NULL, NULL, NULL, TRUE);

  // Create demo Users
  $demo_users = array(
    'Jeff Noyes' => 'Jeff Noyes',
    'Drew Robertson' => 'Drew Robertson',
    'Lisa Rex' => 'Lisa Rex',
    'Katelyn Fogarty' => 'Katelyn Fogarty',
    'Dharmesh Mistry' => 'Dharmesh Mistry',
    'Erica Ligeski' => 'Erica Ligeski',
  );

  foreach ($demo_users as $name) {
    list($first_name, $last_name)  = explode(" ", $name);
    $normalize_name = commons_normalize_name($name);
    $password = user_password(8);

    $fields = array(
      'name' => $name,
      'mail' => "{$normalize_name}@example.com",
      'pass' => $password,
      'status' => 1,
      'init' => "{$normalize_name}@example.com",
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user'
      ),
    );

    $fields['field_name_first'][LANGUAGE_NONE][0]['value'] = $first_name;
    $fields['field_name_last'][LANGUAGE_NONE][0]['value'] = $last_name;

    $demo_users[$name] = user_save('', $fields);

    // Add avatars to demo Users.
    commons_add_user_avatar($demo_users[$name]);
  }

  // Demo Content.

  // Group: Boston
  $boston_group = new stdClass();
  $boston_group->type = 'group';
  node_object_prepare($boston_group);

  $boston_group->title = 'Boston';
  $boston_group->body[LANGUAGE_NONE][0]['value'] = commons_veggie_ipsum();
  $boston_group->uid = $demo_users['Jeff Noyes']->uid;
  $boston_group->language = LANGUAGE_NONE;
  $boston_group->created = time() - 604800;
  $boston_group->status = 1;
  node_save($boston_group);

  // Group: New York City
  $nyc_group = new stdClass();
  $nyc_group->type = 'group';
  node_object_prepare($nyc_group);

  $nyc_group->title = 'New York City';
  $nyc_group->body[LANGUAGE_NONE][0]['value'] = commons_veggie_ipsum();
  $nyc_group->uid = $demo_users['Drew Robertson']->uid;
  $nyc_group->language = LANGUAGE_NONE;
  $nyc_group->status = 1;
  // Make the group 1 week old:
  $nyc_group->created = time() - 604800;
  node_save($nyc_group);


  // node: Best brunch places in Cambridge
  $node = new stdClass();
  $node->type = 'node';
  node_object_prepare($node);

  $node->title = 'Best brunch places in Cambridge';
  $node->uid = $demo_users['Lisa Rex']->uid;
  $node->language = LANGUAGE_NONE;
  // 1:30 ago.
  $node->created = time() - 5400;
  $node->body[LANGUAGE_NONE][0]['value'] = "My aunt and I have been trying a lot of brunch places in Cambridge. Here's our favorites: <ul><li>North Street Grille for their breads
<li>Mixtura for the souffles
<li>The Neighborhood Restaurant for the vast quantities of food
<li>City Girl Cafe for the ambiance <li>Bom Cafe for granola";
  $node->body[LANGUAGE_NONE][0]['format'] = filter_default_format();

  $node->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
  $node->field_radioactivity[LANGUAGE_NONE][0]['radioactivity_energy'] = 8;

  $terms = array(
    'brunch',
    'Cambridge',
    'dining out'
  );

  foreach ($terms as $term) {
    $node->field_topics[LANGUAGE_NONE][]['tid'] = commons_create_topic($term);
  }

  node_save($node);

  // Wiki: How to create a veggie burger
  $wiki = new stdClass();
  $wiki->type = 'wiki';
  node_object_prepare($wiki);
  $wiki->created = time() - 604800;
  $wiki->title = 'How to create a veggie burger';
  $wiki->uid = $demo_users['Dharmesh Mistry']->uid;
  $wiki->language = LANGUAGE_NONE;
  $wiki->body[LANGUAGE_NONE][0]['value'] = "Celtuce quandong gumbo coriander avocado yarrow broccoli rabe parsnip nori mung bean watercress taro pea sprouts cress. Bush tomato water spinach radish green bean okra spinach garlic cress. Cucumber squash tigernut swiss chard celery cabbage beet greens nori groundnut grape melon seakale. Earthnut pea kakadu plum chicory potato plantain fennel gumbo chickweed gourd cauliflower wakame green bean epazote taro quandong. Celery turnip kombu lotus root lettuce sierra leone bologi kale cauliflower gumbo parsnip taro welsh onion melon asparagus green bean beet greens black-eyed pea jÃ­cama. Kohlrabi lentil turnip greens plantain bush tomato leek arugula courgette amaranth yarrow.";
  $wiki->body[LANGUAGE_NONE][0]['format'] = filter_default_format();

  $wiki->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
  $wiki->field_radioactivity[LANGUAGE_NONE][0]['radioactivity_energy'] = 8;

  $terms = array(
    'vegetarian',
    'casual',
    'meal',
    'recipe'
  );

  foreach ($terms as $term) {
    $wiki->field_topics[LANGUAGE_NONE][]['tid'] = commons_create_topic($term);
  }

  node_save($wiki);

  // Event: Ribfest Boston 2012
  $event = new stdClass();
  $event->type = 'event';
  node_object_prepare($event);

  $event->title = 'Ribfest Boston 2012';
  $event->uid = $demo_users['Katelyn Fogarty']->uid;
  $event->language = LANGUAGE_NONE;
  $event->body[LANGUAGE_NONE][0]['value'] = "<strong>What ignited in 1999 as a community block party has exploded into one of Boston's most anticipated street festivals.</strong> Averaging 50,000 pounds of ribs and BBQ from more than 30 restaurants, Ribfest Boston 2013 is expected to draw more than 50,000 people. As a nationally recognized music festival, we host a hot blend of Indie, pop, Indie Roots, rock and alt country for one of the most unique band lineups in the city. Families can spend the whole weekend in Kids Square to enjoy live entertainment, inflatables, games and more.";
  $event->body[LANGUAGE_NONE][0]['format'] = filter_default_format();
  $event->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
  $terms = array(
    'bbq',
    'music',
    'festival'
  );

  foreach ($terms as $term) {
    $event->field_topics[LANGUAGE_NONE][]['tid'] = commons_create_topic($term);
  }

  $event->field_date[LANGUAGE_NONE][0]['value'] = '2014-01-12 10:00:00';
  $event->field_date[LANGUAGE_NONE][0]['value2'] = '2014-01-13 13:00:00';

  $event->field_address[LANGUAGE_NONE][0]['thoroughfare'] = '25 Corporate Drive';
  $event->field_address[LANGUAGE_NONE][0]['premise'] = '4th floor';
  $event->field_address[LANGUAGE_NONE][0]['nodeal_code'] = '01803';
  $event->field_address[LANGUAGE_NONE][0]['country'] = 'US';
  $event->field_address[LANGUAGE_NONE][0]['location'] = 'Waterfront';
  $event->field_address[LANGUAGE_NONE][0]['administrative_area']  = 'MA';
  $event->field_address[LANGUAGE_NONE][0]['locality'] = 'Boston';
  $event->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
  node_save($event);

  // Don't display the 'registration settings have been saved' message.
  drupal_get_messages('status', TRUE);
  drupal_get_messages('completed', TRUE);

  // Make sure the admin user is also a group.
  // @todo: Move to a better place.
  $wrapper = entity_metadata_wrapper('user', 1);
  $wrapper->{OG_GROUP_FIELD}->set(TRUE);
  $wrapper->save();
}


function _collabco_debug($var, $die=true) {
  $content = file_get_contents('x_install.log');
  file_put_contents('x_install.log', $content . "\n" . print_r($var, true));
  empty($die) or die;
}



