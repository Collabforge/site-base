<?php

/**
  @alexarpen
*/

// @FIXME: this should be done via variable or a more reliable way. not just being hardcoded.
define('META_PROFILE_PHOTO_FIELD', 'field_profile_photo');


function meta_profile_enable() {
  //_meta_profile_helper_update_weight('profile2', 1);
  //_meta_profile_helper_update_weight('meta_profile', 2);
}
function meta_profile_disable() {
  // _meta_profile_helper_update_weight('profile2', 2);
  // _meta_profile_helper_update_weight('meta_profile', 1);
}
function meta_profile_form_alter(&$form, &$form_state, $form_id) {
}




function _meta_profile_hide_form_item(&$item) {
  $item['#access'] = false;
  //drupal_set_message('DEBUG: The photo field has been made hidden.');
}


/*
function meta_profile_preprocess_page(&$vars) {
  if (_meta_profile_is_in_resetpass_page()) {
    $vars['tabs']['#secondary'] = array();
  }
}
*/
function meta_profile_form_user_register_form_alter(&$form, &$form_state) {
  // Make the default photo profile hidden if it's already there.
  if (isset($form['picture'])) {
    _meta_profile_hide_form_item($form['picture']);
  }
}

// @TODO: make sure that there is no better way rather than checking a user data
function _meta_profile_is_in_resetpass_page() {
  return !empty($_GET['pass-reset-token']);
}


function meta_profile_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if (_meta_profile_is_in_resetpass_page()) {
    //$form['#action'] = url(current_path(), array('external' => FALSE));
  }


  // Make the default photo profile hidden if it's already there.
  if (isset($form['picture'])) {
    _meta_profile_hide_form_item($form['picture']);
  }
    
    // We are going to do the submit process after everything has done
    $form['#submit'][] = '_meta_profile_form_submit';



    if (_meta_profile_is_in_resetpass_page()) {
      //_meta_profile_clean_pass_reset_form($form);
    }
}


function _meta_profile_clean_pass_reset_form(&$form) {
  foreach ($form as $key=>&$item) {
    if ($key != 'actions' and $key != 'account') {
      if (strpos($key, '#') === false and is_array($item)) {
        $item['#access'] = false;
      }
    }
  }
  foreach ($form['account'] as $key=>&$item) {
    if (!in_array($key, array('pass', 'current_pass_required_values'))) {
      if (strpos($key, '#') === false and is_array($item)) {
        $item['#access'] = false;
      }
    }
  }
}





function _meta_profile_form_submit($form, &$form_state) {

    if (isset($form_state['values']['profile_profile'][META_PROFILE_PHOTO_FIELD])) {

      // let's get the file id which has just updated
      $fid = $form_state['values']['profile_profile'][META_PROFILE_PHOTO_FIELD]['und'][0]['fid'];

      // get the user which is running the form
      $uid = $form['#user']->uid;

      _meta_profile_update_user_photo($uid, $fid);

    }
  }

/**
  updated the profile photo based on an already-updaloaded drupal file
  @TODO: more check and validation.
*/
function _meta_profile_update_user_photo($uid, $fid) {


  $user = user_load($uid);

  $file = file_load($fid);
  $picture = (object) array(
    'fid' => $file->fid
    , 'uid' => $uid
    , 'filename' => $file->filename
    , 'filemime' => $file->filemime
    , 'uri' => $file->uri
  );

  $user->picture = $picture;

  user_save($user);

}


/*

alexar_debug(true);

function alexar_debug($debug=true) {
  ini_set('display_errors', $debug);
  ini_set('display_startup_errors', $debug);
  error_reporting(E_ALL);
}

function x($var, $die=true) {
  echo '<xmp>';
  print_r($var);
  echo '</xmp>';
  empty($die) or die(); 
}


*/


/**
  Helpers
*/


function _meta_profile_helper_update_weight($module, $weight) {
  db_update('system')
  ->fields(array('weight' => $weight))
  ->condition('type', 'module')
  ->condition('name', $module)
  ->execute();
}

