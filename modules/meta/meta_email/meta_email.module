<?php
/**
 * @file
 * Drupal's mail API.
 */

define('META_EMAIL_DEBUG', true);


/**
 * Implements hook_mail_alter
 */
function meta_email_mail_alter(&$message) {
  if (META_EMAIL_DEBUG) {
    $message->send = false;
  }
}

/**
 * Sends an email when a user has requested a Draft Hub to be revised
 */
function meta_email_send_send_for_revision($gid, $uid) {
  if (!$group = meta_group_get_group($gid)) {
    return false;
  }
  if (!$user = user_load($uid)) {
    return false;
  }
  $admins = meta_group_get_admins();
  meta_email_send('group_waiting_approval__to_requester', null, array($user), $vars);
  meta_email_send('group_waiting_approval__to_admins', null, $admins, $vars);
}


/**
 * Sends appropriate emails when a Group is published
 */
function meta_email_send_group_published($gid) {
  if (!$group = meta_group_get_group($gid)) {
    return false;
  }
  $owner = user_load($group->uid);
  meta_email_send('group_published__to_group_owner', null, array($owner), $vars);
}


/**
 * Sends appropriate emails when a Topic is added to a Group
 */
function meta_email_callback_group_topic_added($gid) {
  if (!$group = meta_group_get_group($gid)) {
    return false;
  }
  $owner = user_load($group->uid);
  $members = meta_group_get_group_members($gid);
  $vars = array(
    '' => ''
  );
  meta_email_send('group_topic_added__to_group_owner', null, array($owner), $vars);
  meta_email_send('group_topic_added__to_group_members', null, $members, $vars);
}


/**
 * Sends appropriate emails when a User is joined a Group
 */
function meta_email_send_user_joined($gid, $uid) {
  if (!$group = meta_group_get_group($gid)) {
    return false;
  }
  if (!$user = user_load($uid)) {
    return false;
  }
  
  $owner = user_load($group->uid);
  $members = meta_group_get_group_members($gid);
  $vars = array(
    '' => ''
  );
  meta_email_send('member_joined__to_group_owner', null, array($owner), $vars);
  meta_email_send('member_joined__to_new_member', null, $members, $vars);
  meta_email_send('member_joined__to_group_members', null, $members, $vars);
} 



function meta_email_callback_comment_added($comment) {

  $node = node_load($comment->nid);

  // @TODO: should not be hardcoded. Use variables
  if ($node->type != 'conversation') {
    return;
  }

  $owner = user_load($node->uid);
  $commentator = user_load($comment->uid);
  $followers = meta_follow_get_followers($node->nid);

  $vars = array(
    '#comment' => sprintf('%s %s', $comment->subject, $comment->comment)
  );

  if (!empty($comment->pid)) {
    $comment_parent = comment_load($comment->pid);
    $vars['#comment_parent'] = sprintf('%s %s', $comment_parent->subject, $comment_parent->comment);
    meta_email_send('comment_replied__to_topic_followers', $commentator, $followers, $vars);
    meta_email_send('comment_replied__to_topic_owner', $commentator, array($owner), $vars);
  } else {
    meta_email_send('comment_added__to_topic_followers', $commentator, $owner, $vars);
    meta_email_send('comment_added__to_topic_owner', $commentator, $owner, $vars);
  }

  if (defined('META_EMAIL_DEBUG') and META_EMAIL_DEBUG) {
    drupal_set_message(t('DEBUG: PLACEHOLDER for email: Comment #comment has added to #topic', array(
      '#comment' => $comment->subject . ' ' . $comment->comment
      , '#topic' => $node->title
    )));
  }
}



/**
 * Sends an e-mail.
 *
 * @param string $key
 *   Mail key
 * @param integer $from_user
 * @param array $to_users
 *   Array of integers
 */
function meta_email_send($key, $from_user, $to_users, $vars) {
  $from = null; //let drupal set it by default
  if (isset($from_user->mail)) {
    $from = $from_user->mail;
  }

  if (META_EMAIL_DEBUG) {
    $_to_emails = array();
    foreach ($to_users as $_to_user) {
      $_to_emails[] = $_to_user->mail;
    }
    drupal_set_message(t('Email #key is being sent from #from to #to_users with variables: #vars', array(
      '#key' => $key
      , '#from' => $from
      , '#to' => print_r($_to_emails, true)
      , '#vars' => print_r($vars, true)
    )));
  }

  foreach ($to_users as $to_user) {
    $result = drupal_mail('meta_email', $key, $to_user->mail, language_default(), $vars, $from);
    if ($result['result'] == TRUE) {
      drupal_set_message(t('Your message has been sent.'));
    } else {
      drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
    }
  }
}


/**
 * Implements hook_mail().
 */
function meta_email_mail($key, &$message, $params) {
  global $user;

  $options = array(
    'langcode' => $message['language']->language,
  );

  switch ($key) {
    case 'comment_replied__to_topic_followers':
      $message['subject'] = t('A new comment on your topic', $params, $options);  
      $message['body'][] = t('blah blah blah', $params, $options);
      break;
    case 'comment_replied__to_topic_owner':
      $message['subject'] = t('PLACEHOLDER', $params, $options);  
      $message['body'][] = t('PLACEHOLDER', $params, $options);
      break;
    case 'comment_added__to_topic_followers':
      $message['subject'] = t('PLACEHOLDER', $params, $options);  
      $message['body'][] = t('PLACEHOLDER', $params, $options);
      break;
    case 'comment_added__to_topic_owner':
      $message['subject'] = t('PLACEHOLDER', $params, $options);  
      $message['body'][] = t('PLACEHOLDER', $params, $options);
      break;
    case 'group_published__to_group_owner':
      $message['subject'] = t('PLACEHOLDER', $params, $options);  
      $message['body'][] = t('PLACEHOLDER', $params, $options);
      break;
    case 'member_joined__to_new_member':
      $message['subject'] = t('PLACEHOLDER', $params, $options);  
      $message['body'][] = t('PLACEHOLDER', $params, $options);
      break;
    case 'member_joined__to_group_owner':
      $message['subject'] = t('PLACEHOLDER', $params, $options);  
      $message['body'][] = t('PLACEHOLDER', $params, $options);
      break;
    case 'member_joined__to_group_members':
      $message['subject'] = t('PLACEHOLDER', $params, $options);  
      $message['body'][] = t('PLACEHOLDER', $params, $options);
      break;
    case 'group_waiting_approval__to_requester':
      $message['subject'] = t('PLACEHOLDER', $params, $options);  
      $message['body'][] = t('PLACEHOLDER', $params, $options);
      break;
    case 'group_waiting_approval__to_admins':
      $message['subject'] = t('PLACEHOLDER', $params, $options);  
      $message['body'][] = t('PLACEHOLDER', $params, $options);
      break;
    case 'group_topic_added__to_group_owner':
      $message['subject'] = t('PLACEHOLDER', $params, $options);  
      $message['body'][] = t('PLACEHOLDER', $params, $options);
      break;
    case 'group_topic_added__to_group_members':
      $message['subject'] = t('PLACEHOLDER', $params, $options);  
      $message['body'][] = t('PLACEHOLDER', $params, $options);
      break;
    case 'PLACEHOLDER':
      $message['subject'] = t('PLACEHOLDER', $params, $options);  
      $message['body'][] = t('PLACEHOLDER', $params, $options);
      break;
  }
  $signature = "\n" . t("Kind Regards \n The META members only community team", array(), $options) . "\n";
  $message['body'][] = $signature;
}

/**
for help

    case 'user_added_to_hub':
         $config['message'] = t("Hi @username \n
          @from has added you to the Continuous Collaboration Hub called @title \n
          You will be able to join the discussion in the Hub Topics and contribute useful files in the Hub Library \n
          If you don't want updates in your Activity Feed from the Hub, simply visit Your Hubs @url , find the Hub you've been added to, and click Unsubscribe",$values);
        break;
    case 'send_for_revision' :
       // $to = variable_get('site_mail', 'admin@example.com');
        $values = array( '@title' => $hub->title, '@from' => $from_user->name, '@from_email' => $from_user->mail ); 
        $config['message'] = t("Hi META admin, \n
         A new Hub requires your attention. @from has submitted their hub '@title' for you to review.
         Member name: @from    
         Member email: @from_email "
          ,$values);
        break;  
    case 'join_hub' :
        $values = array( '@title' => $hub->title, '@from' => $from_user->name, '@from_email' => $from_user->mail, '@to' => $to_user->name ); 
        $config['message'] = t("Hi @to, \n
         A member has joined your hub, '@title'. 
         Name: @from "
          ,$values);
        break;  
    case 'hub_published' :
        $url = url('hubs', array('absolute' => TRUE));
        $values = array( '@title' => $hub->title, '@from' => $from_user->name, '@from_email' => $from_user->mail, '@to' => $to_user->name, '@url' => $url ); 
        $config['message'] = t("Hi @to, \n
         Your hub, @title, has been approved and published by the META Administrator.
         Click here to view your hub @url "
          ,$values);  
       break;   



*/



