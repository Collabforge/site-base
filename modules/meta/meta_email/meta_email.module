<?php
/**
 * @file
 * Drupal's mail API.
 */


/**
 * Implements hook_mail().
 *
 * This hook defines a list of possible e-mail templates that this module can
 * send. Each e-mail is given a unique identifier, or 'key'.
 *
 * $message comes in with some standard properties already set: 'to' address,
 * 'from' address, and a set of default 'headers' from drupal_mail(). The goal
 * of hook_mail() is to set the message's 'subject' and 'body' properties, as
 * well as make any adjustments to the headers that are necessary.
 *
 * The $params argument is an array which can hold any additional data required
 * to build the mail subject and body; for example, user-entered form data, or
 * some context information as to where the mail request came from.
 *
 * Note that hook_mail() is not actually a hook. It is only called for a single
 * module, the module named in the first argument of drupal_mail(). So it's
 * a callback of a type, but not a hook.
 */
function meta_email_mail($key, &$message, $params) {
  global $user;

  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = array(
    'langcode' => $message['language']->language,
  );

  switch ($key) {
    // Send a simple message from the contact form.
    case 'user_added_to_hub':
       // x("in correct fn");
      $message['subject'] = t('E-mail sent from @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Note that the message body is an array, not a string.
    //  $message['body'][] = t('Hi @name sent you the following message:', array('@name' => $user->name), $options);
      // Because this is just user-entered text, we do not need to translate it.
      // Since user-entered text may have unintentional HTML entities in it like
      // '<' or '>', we need to make sure these entities are properly escaped,
      // as the body will later be transformed from HTML to text, meaning
      // that a normal use of '<' will result in truncation of the message.

      $message['body'][] = check_plain($params['message']);
      break;
  }
}

/**
 * Sends an e-mail.
 *
 * @param array $form_values
 *   An array of values from the contact form fields that were submitted.
 *   There are just two relevant items: $form_values['email'] and
 *   $form_values['message'].
 */
function meta_email_mail_send($key,$config) {
    
  $module = 'meta_email';
  
  $to_user = user_load($config['to']);
  
  $to = $to_user->mail; 
  $from_user = user_load($config['from']);
  $hub = node_load($config['group']);
  $from = variable_get('site_mail', 'admin@example.com');
 
  switch ($key) {
    // Send a simple message from the contact form.
    case 'user_added_to_hub':
        $url = url('profile/hubs', array('absolute' => TRUE));
       
        $values = array('@username' => $to_user->name, '@title' => $hub->title, '@url' => $url, '@from' => $from_user->name);  
      
         $config['message'] = t("Hi @username \n
          @from has added you to the Continuous Collaboration Hub called @title \n
          You will be able to join the discussion in the Hub Topics and contribute useful files in the Hub Library \n
          If you don't want updates in your Activity Feed from the Hub, simply visit Your Hubs @url , find the Hub you've been added to, and click Unsubscribe",$values);
        break;
        

    
  }
 
  
  $language = language_default();

  // Whether or not to automatically send the mail when drupal_mail() is
  // called. This defaults to TRUE, and is normally what you want unless you
  // need to do additional processing before drupal_mail_send() is called.
  $send = TRUE;
  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $config, $from, $send);
 /* if ($result['result'] == TRUE) {
    drupal_set_message(t('Your message has been sent.'));
  }
  else {
    drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
  } */

}

/**
 * Implements hook_mail_alter().
 *
 * This function is not required to send an email using Drupal's mail system.
 *
 * Hook_mail_alter() provides an interface to alter any aspect of email sent by
 * Drupal. You can use this hook to add a common site footer to all outgoing
 * email, add extra header fields, and/or modify the email in anyway. HTML-izing
 * the outgoing email is one possibility.
 */
function meta_email_mail_alter(&$message) {
  // For the purpose of this example, modify all the outgoing messages and
  // attach a site signature. The signature will be translated to the language
  // in which message was built.
  $options = array(
    'langcode' => $message['language']->language,
  );

  $signature = t("\nKind Regards \n The META members only community team\n", array(), $options);

  if (is_array($message['body'])) {
    $message['body'][] = $signature;
  }
  else {
    // Some modules use the body as a string, erroneously.
    $message['body'] .= $signature;
  }
}

/* Implements hook_og_membership_insert 
 * 
 * Send a mail to the user who is added to the hub
 */

function meta_email_og_membership_insert(OgMembership $og_membership) {
   
    if ($og_membership->group_type == 'node' and $og_membership->entity_type == 'user') {
 
        if (!empty($og_membership->etid)) {
            $to_uid = $og_membership->etid;           
        }   
        if (!empty($og_membership->gid)){
           $gid = $og_membership->gid;
           $hub= node_load($gid);
        }  
        if (is_object($hub)) {  
            $from_uid = $hub->uid;
        }

      $config = array(
        'group' => $gid
        , 'from' => $from_uid
        , 'to' => $to_uid      
      );
       // x($config);    
        meta_email_mail_send('user_added_to_hub',$config); 
    }
}



/**
* Helper functions for other modules
* +++++++++++++++++++++
*/


function meta_email_send_send_for_revision($gid, $nid) {
  // @TODO should be implemented
}




