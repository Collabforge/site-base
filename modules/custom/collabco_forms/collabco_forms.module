<?php

/**
 * Implements hook_user_login().
 *
 * Override the default redirect, /user/UID, to go to the front page instead.
 */
function collabco_forms_user_login(&$form_state, $account) {
  if ($account->uid != 1) {
    $form_state['redirect'] = variable_get('site_frontpage', 'node');
  }
}

/**
 * Return an array of uids that commented on the supplied node.
 *
 * @param $nid
 *
 * @return array of the uids of users that commented at least once
 */
function collabco_forms_get_comment_uids_for_node($nid) {
  $node = node_load($nid);
  $comment_uids = array();
  if ($node->comment && $cids = comment_get_thread($node, COMMENT_MODE_FLAT, 1000)) {
    if ($comments = comment_load_multiple($cids)) {
      foreach ($comments as $comment) {
        $comment_uids[$comment->uid] = $comment->uid;
      }
    }
  }
  return $comment_uids;
}

/**
 * Implements hook_form_alter().
 */
function collabco_forms_form_alter(&$form, &$form_state, $form_id) {

  if (!empty($form['comment_notify_settings'])) {
    // Normally $form_id == 'user_register_form' or 'user_profile_form'
    $form['comment_notify_settings']['#title'] = t('Email notification settings');
    if (!empty($form['comment_notify_settings']['node_notify'])) {
      $node_settings = &$form['comment_notify_settings']['node_notify'];
      $node_settings['#title'] = t('For topics I host');
      $node_settings['#type'] = 'radios';
      $node_settings['#options'] = array(
        TRUE => t('Send emails when new comments are posted'),
        FALSE => t('Do not send any emails'),
      );
      $node_settings['#description'] = t('You cannot disable notifications for individual threads.');
    }
    if (!empty($form['comment_notify_settings']['comment_notify'])) {
      $comment_settings = &$form['comment_notify_settings']['comment_notify'];
      $comment_settings['#title'] = t('After I comment on a topic');
      $comment_settings['#type'] = 'radios';
      if (isset($comment_settings['#options'][COMMENT_NOTIFY_NODE])) {
        $comment_settings['#options'][COMMENT_NOTIFY_NODE] = t('Send emails when new comments are posted');
      }
      if (isset($comment_settings['#options'][COMMENT_NOTIFY_COMMENT])) {
        $comment_settings['#options'][COMMENT_NOTIFY_COMMENT] = t('Send emails when someone replies to my comment');
      }
      // COMMENT_NOTIFY_DISABLED comes last.
      unset($comment_settings['#options'][COMMENT_NOTIFY_DISABLED]);
      $comment_settings['#options'][COMMENT_NOTIFY_DISABLED] = t('Do not send any emails');
      $comment_settings['#default_value'] = reset($form['comment_notify_settings']['comment_notify']['#default_value']);
      $comment_settings['#description'] = t('You can disable these notiﬁcations later for individual pieces of content, by visiting the web page for that content.');
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Set up a redirecion handler for the File (aka Knowledge Object) content type.
 */
function collabco_forms_form_knowledge_object_node_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'collabco_forms_redirect_handler';
}

/**
 * Implements hook_form_FORMID_alter().
 */
function collabco_forms_form_comment_form_alter(&$form, &$form_state, $form_id) {
  // '#disabled' does not seem to work here
  unset($form['author']['_author']);

  $form['actions']['submit']['#value'] = 
    in_array('inline_entity_form_trigger_submit', $form['actions']['submit']['#submit'])
    ? t('Post comment and attachment') : t('Post comment');

  $form['notify_settings']['notify']['#title'] = t('Notify me via email for...');
  $form['notify_settings']['notify_type']['#options'][COMMENT_NOTIFY_NODE] = t('all new comments');
  $form['notify_settings']['notify_type']['#options'][COMMENT_NOTIFY_COMMENT] = t('replies to my comment');
}

/**
 * Implements hook_form_FORMID_alter().
 */
function collabco_forms_form_user_admin_settings_alter(&$form, &$form_state) {
  // Anonymous fieldset only contains one field at the moment.
  unset($form['anonymous_settings']['anonymous']);
  unset($form['anonymous_settings']);
}

/**
 * Implements hook_form_FORMID_alter().
 */
function collabco_forms_form_user_profile_form_alter(&$form, &$form_state) {
/*
  $title = ($form['#user_category'] == 'account') ? t('Edit Your Account') : t('Edit Your Profile');
  $form['title'] = array(
    '#markup' => "<h2>$title</h2>",
    '#weight' => -10,
  );
 */
  if ($form['#user_category'] == 'account') {
    $account = $form['#user'];

    // Don't want to see Username. Users are identified by email address.
    unset($form['account']['name']);

    // Tick the "Personal contact form" box by default.
    if (isset($form['contact']['contact'])) {

      if (!isset($account->data['contact'])) {
        watchdog('collabco_forms', 'User %uid: personal contact checkbox was not initialised -- auto-ticked.', array('%uid' => $account->uid));
        $form['contact']['contact']['#default_value'] = TRUE;
      }

      $form['contact']['contact']['#description'] = t('Allow other users on the site to see your email address and contact you via a contact form on your profile page. Site administrators will still be able to contact you if this is disabled.');
    }

    // One-time login link and token present in URL.
    // Taken from user.module, function user_account_form().
    $pass_reset = isset($_SESSION['pass_reset_' . $account->uid]) && isset($_GET['pass-reset-token']) && ($_GET['pass-reset-token'] == $_SESSION['pass_reset_' . $account->uid]);

    if ($pass_reset) {
      // Remove all fields except the submit button(s) and the elements
      // $form['account']['pass'] and $form['account']['current_pass'].
      $elements_to_keep = array('account', 'actions', 'form_build_id', 'form_id', 'form_token');
      foreach (element_children($form) as $element) {
        if (!in_array($element, $elements_to_keep)) {
          unset($form[$element]);
        }
      }
      if (isset($form['account']['mail'])) {
        $form['account']['mail']['#type'] = 'hidden';
      }
    }
  }
  $form['#submit'][] = 'collabco_forms_redirect_handler';
}

/**
 * Implements hook_form_FORMID_alter().
 */
function collabco_forms_form_user_register_form_alter(&$form, &$form_state) {
  $form['account']['mail']['#description'] = t('A valid e-mail address. All e-mails from the website will be sent to this address. Members of the site will be able to contact you unless you change this in your Account settings.');
}

/**
 * Attaches the redirect to the submitted form.
 *
 * @param array $form
 * @param array $form_state
 */
function collabco_forms_redirect_handler($form, &$form_state) {
  global $base_url;

  if ($form['#form_id'] == 'knowledge_object_node_form') {
    // This doesn't work at the mo.
    // Redirect destination needs to be conditional on where we came from
    // $destination = "/hubs";
    // $form_state['redirect'] = "$base_url/$destination";
    return;
  }

  if (isset($form['#user_category'])) {
    switch ($form['#user_category']) {
      case 'account':
        $form_state['redirect'] = $base_url;
        break;
      case 'profile':
        $form_state['redirect'] = "$base_url/user";
        break;
      default:
    }
  }

}

/**
 * Implements hook_field_extera_fields_alter().
 */
function collabco_forms_field_extra_fields_alter(&$extra_fields) {
  // "User name and password"
  $extra_fields['user']['user']['form']['account']['description'] .= ' ' . t('NOT USED ON THIS SITE');
}

/**
 * Implements hook_filter_info_alter().
 */
function collabco_forms_filter_info_alter(&$info) {
  $info['filter_html']['default settings']['filter_html_help'] = 0;
  unset($info['filter_autop']['tips callback']);
  unset($info['filter_html']['tips callback']); 
  unset($info['filter_url']['tips callback']);
  unset($info['freelinking']['tips callback']); // freelinking.module
  unset($info['filter_mentions']['tips callback']); // mentions.module
}

/**
 * Implements hook_inline_entity_form_settings_alter().
 *
 * @param $settings
 *   An array with the following keys:
 *   - entity_type - The entity_type being managed.
 *   - bundles - Bundles of entities that the user is allowed to create.
 *   - column - The name of the ref. field column that stores the entity id.
 * @param $field
 *   The field array of the reference field.
 * @param $instance
 *   The instance array of the reference field.
 */
function collabco_forms_inline_entity_form_settings_alter(&$settings, $field, $instance) {
  if ($field['type'] == 'entityreference' && $field['field_name'] == 'field_file_ref') {
    // Only knowledge_objects may be added via the inline entity form.
    // @todo detect what field_file_ref refers to and use that
    $settings['bundles'] = array('knowledge_object');
  }
}

/**
 * Perform alterations before an entity form is included in the IEF widget.
 *
 * @param $entity_form
 *   Nested array of form elements that comprise the entity form.
 * @param $form_state
 *   The form state of the parent form.
 */
function collabco_forms_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#bundle'] == 'knowledge_object') {
    unset($entity_form['og_group_ref']);
  }
}
