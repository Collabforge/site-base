<?php

/**
 * @file
 * Module file for behat_testing module
 */

/**
 * Implements hook_menu().
 */
function behat_testing_menu() {

  // We don't want this enabled on live sites so allow
  // a sites config setting that prevents anything from
  // actually working.
  if (variable_get('behat_testing_disabled', FALSE)) {
    return array();
  }

  $items['behat-testing/quick-switch'] = array(
    'title' => 'Example Page',
    'page callback' => 'behat_testing_user_switch',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['behat-testing/last-run'] = array(
    'title' => 'Behat testing last run',
    'description' => 'Behaviour Driven Development testing with Behat',
    'page callback' => 'behat_testing_last_run',
    'access arguments' => array('administer behat tests'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/development/behat-testing'] = array(
    'title' => 'Behat testing',
    'description' => 'Behaviour Driven Development testing with Behat',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('behat_testing_admin_testing'),
    'access arguments' => array('administer behat tests'),
  );

  $items['admin/config/development/behat-testing/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -5,
  );

  $items['admin/config/development/behat-testing/features'] = array(
    'title' => 'Manage features',
    'description' => 'Review and edit the features',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('behat_testing_admin_editor'),
    'access arguments' => array('administer behat tests'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function behat_testing_permission() {
  return array(
    'administer behat tests' => array(
      'title' => t('Administer behat tests'),
      'description' => t('Allow access to the behat tests overview screen'),
    ),
  );
}

/**
 * Menu callback. Get the last run data - this is printed into an iframe.
 */
function behat_testing_last_run() {
  global $user;
  $results = cache_get('behat_last_run_' . $user->uid);
  print !empty($results->data) ? $results->data : '<p>' . t('No test runs yet!') . '</p>';
  drupal_exit();
}

/**
 * Drupal form and menu callback.
 * Execute the behat tests.
 */
function behat_testing_admin_testing($form, &$form_state) {

  $form['tags'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
    '#title' => t('Tags'),
    '#description' => t('Comma separated list tags to restrict the test run by.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Run tests'),
  );

  $form['behat'] = array(
    '#markup' => "<h2>Last test run results:</h2><iframe style='float:left;width:100%;height:1000px;border:none;' src='/behat-testing/last-run'></iframe>",
  );

  return $form;
}

/**
 * Run the test and cache the result.
 */
function behat_testing_admin_testing_submit($form, $form_state) {
  try {
    global $user;

    $tags = $form_state['values']['tags'];
    $tags_array = empty($tags) ? array() : explode(',', $tags);

    $cmd = _behat_testing_generate_command('html', 'default', $tags_array);
    $result = behat_testing_shell_proc_open($cmd);
    cache_set('behat_last_run_' . $user->uid, $result);
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    watchdog_exception('behat_testing', $e);
  }
}

/**
 * Drupal form and menu callback.
 * Test administration interface.
 */
function behat_testing_admin_editor($form, &$form_state) {
  $config_file = conf_path() . '/behat.yml';
  $tests_directory = variable_get('behat_features_path', 'sites/all/tests');

  if (!file_exists($config_file) || !file_exists($tests_directory)) {
    drupal_set_message('Configuration needs doing!', 'error');
    return '';
  }

  $filename = !empty($_GET['filename']) ? check_plain($_GET['filename']) : '';

  $options = array('' => t('Select test file'));

  foreach (file_scan_directory($tests_directory, '/.*\.feature$/') as $file) {
    $options[$file->name] = $file->name;

    if (!empty($filename) && $file->name == $filename) {
      $form['editedfile'] = array(
        '#type' => 'hidden',
        '#value' => $filename,
      );

      $form['editor'] = array(
        '#type' => 'textarea',
        '#default_value' => file_get_contents($file->uri),
        '#weight' => 10,
        '#rows' => 100,
      );
    }
  }

  $form['features'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $filename,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'submit',
  );

  return $form;
}

/**
 * Drupal form submission.
 */
function behat_testing_admin_editor_submit($form, &$form_state) {
  if (!empty($form_state['values']['editedfile'])) {
    $tests_directory = variable_get('behat_features_path', 'sites/all/tests');

    if (file_exists($tests_directory)) {
      foreach (file_scan_directory($tests_directory, '/.*\.feature$/') as $file) {
        if ($file->name == $form_state['values']['editedfile']) {
          $bytes = file_put_contents($file->uri, $form_state['values']['editor']);
          if ($bytes === FALSE) {
            drupal_set_message(t('Failed to save feature %feature', array('%feature' => $form_state['values']['editedfile'])), 'error');
          }
          else {
            drupal_set_message(t('Saved feature %feature', array('%feature' => $form_state['values']['editedfile'])));
          }
          break;
        }
      }
    }
  }

  // Redirect to the chosen features file.
  $form_state['redirect'] = array('admin/config/development/behat-testing/features', array('query' => array('filename' => $form_state['values']['features'])));
}

/**
 * Setup a test instance.
 */
function behat_testing_setup() {
  $connection_info = Database::getConnectionInfo('default');
  foreach ($connection_info as $target => $value) {
    $fullprefix = $value['prefix']['default'] . '_st99';
    $connection_info[$target]['prefix'] = array(
      'default' => $fullprefix,
    );
  }
  Database::renameConnection('default', 'simpletest_original_default');
  Database::addConnectionInfo('default', 'default', $connection_info['default']);

  $GLOBALS['databases']['default'] = $connection_info;
}

/**
 * Reset all pointers to the test environment.
 */
function behat_testing_preload_registry() {
  $original_connection = Database::getConnection('default', 'simpletest_original_default');
  $test_connection = Database::getConnection();

  foreach (array('registry', 'registry_file') as $table) {
    // Find the records from the parent database.
    $source_query = $original_connection
      ->select($table, array(), array('fetch' => PDO::FETCH_ASSOC))
      ->fields($table);

    $dest_query = $test_connection->insert($table);

    $first = TRUE;
    foreach ($source_query->execute() as $row) {
      if ($first) {
        $dest_query->fields(array_keys($row));
        $first = FALSE;
      }
      // Insert the records into the child database.
      $dest_query->values($row);
    }

    $dest_query->execute();
  }
}

/**
 * Setup fake file paths for test environment.
 *
 * @return array
 *   Path associations
 */
function behat_testing_setup_paths() {
  global $conf;

  static $paths;

  if (!isset($paths)) {
    $original_public_files_directory = variable_get('file_public_path', conf_path() . '/files');
    $paths = array(
      'file_public_path' => $original_public_files_directory . '/behattest',
      'file_private_path' => $original_public_files_directory . '/behattest/.private',
      'file_tmp_path' => $original_public_files_directory . '/behattest/.temp',
    );
  }

  foreach ($paths as $type => $path) {
    variable_set($type, $path);
    file_prepare_directory($path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    $conf[$type] = $path;
  }

  return $paths;
}

/**
 * Setup mock email service to stop emails being sent from the tests.
 */
function behat_testing_setup_mail() {
  // Use the test mail class instead of the default mail handler class.
  variable_set('mail_system', array('default-system' => 'TestingMailSystem'));
}

/**
 * User switching mechanism.
 */
function behat_testing_user_switch($new_user = 1) {
  if (drupal_valid_test_ua()) {
    $form_state['uid'] = $new_user;
    user_login_submit(array(), $form_state);
  }
  else {
    drupal_not_found();
  }
}

/**
 * At the beginning of the test, clone the db.
 */
function behat_testing_copy_database($prefix) {
  $res = db_query('SHOW TABLES');
  foreach ($res as $r) {
    $r = (array) $r;
    $table = array_pop($r);
    if (!preg_match('/^' . $prefix . '/', $table)) {
      if (!behat_testing_copy_table($table, $prefix . $table)) {
        watchdog('behat_testing', 'Problem copying table @table', array('@table' => $table), WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Delete a table.
 */
function behat_testing_drop_table($to) {
  db_query("DROP TABLE $to");
}

/**
 * Copy a table.
 */
function behat_testing_copy_table($from, $to) {
  if (behat_testing_table_exists($to)) {
    behat_testing_drop_table($to);
  }
  //we need to truncate the table name to 64 chars before creating it
  $tbname = substr($to,0,64);
  db_query("CREATE TABLE $tbname LIKE $from");
  return db_query("INSERT INTO $tbname SELECT * FROM $from");
}

/**
 * Check if a table exists.
 *
 * @return boolean
 *   TRUE if it does, FALSE if it does not.
 */
function behat_testing_table_exists($tablename, $database = FALSE) {
  if (!$database) {
    $database = db_query("SELECT DATABASE()")->fetchField();
  }
  $res = db_query("
    SELECT COUNT(*) AS count
    FROM information_schema.tables
    WHERE table_schema = '$database'
    AND table_name = '$tablename'
    ")->fetchField();
  return $res == 1;
}

/**
 * Execute bash command using proc_open().
 * Based on drush_shell_proc_open().
 *
 * @returns
 *   Exit code from launched application
 *     0 no error
 *     1 general error
 *     127 command not found
 */
function behat_testing_shell_proc_open($cmd) {
  $descriptorspec = array(
    0 => array("pipe", "r"),
    1 => array("pipe", "w"),
    2 => array("pipe", "w"),
  );

  $process = proc_open($cmd, $descriptorspec, $pipes);

  if (is_resource($process)) {

    // Print pipe output.
    $result = stream_get_contents($pipes[1]);

    // Close pipe.
    fclose($pipes[1]);

    $proc_status = proc_get_status($process);
    $exit_code = proc_close($process);
    $exit_code = $proc_status["running"] ? $exit_code : $proc_status["exitcode"];

    if ($exit_code !== 0) {
      watchdog('behat_testing', 'Odd exit code of @code', array('@code' => $exit_code), WATCHDOG_WARNING);
    }

    return $result;
  }

  throw new Exception('Command failed to run');
}

/**
 * Generate the behat command.
 * This will look for a behat.yml in the sites config folder.
 *
 * @param string $format
 *   'html' -> HTML output.
 *   'pretty' -> Command line format.
 *   'junit' -> Junit style
 * @param string $profile
 *   A profile specified in the behat.yml file
 *   default is 'default'.
 * @param array $tags_array
 *   An array of tag strings to filter the tests by
 * @param string $output_path
 *   A path to a directory to save output to, required if
 *   format is junit.
 *
 * @return string
 *   The command that needs executing.
 */
function _behat_testing_generate_command($format = 'html', $profile = 'default', array $tags_array = array(), $out = '') {
  $behat_config_path = behat_testing_get_config();
  $tags = !empty($tags_array) ? '--tags "' . implode(',', $tags_array) . '"' : '';
  $out = empty($out) ? '' : ' --out "' . $out . '"';
  return "behat --config {$behat_config_path} --profile $profile -f {$format}{$out} {$tags}";
}

/**
 * Get the current config file path.
 */
function behat_testing_get_config() {
  $behat_config_path = conf_path() . '/behat.yml';

  if (!file_exists(DRUPAL_ROOT . '/' . $behat_config_path)) {
    throw new Exception('Could not find a behat.yml file at ' . $behat_config_path);
  }

  return $behat_config_path;
}

/**
 * Reinstall the site.
 */
function behat_testing_reinstall($profile = 'standard', array $additional_form_options = array()) {
  global $user, $language, $conf;

  // Set to English to prevent exceptions from utf8_truncate() from t()
  // during install if the current language is not 'en'.
  // The following array/object conversion is copied from language_default().
  $language = (object) array('language' => 'en', 'name' => 'English', 'native' => 'English', 'direction' => 0, 'enabled' => 1, 'plurals' => 0, 'formula' => '', 'domain' => '', 'prefix' => '', 'weight' => 0, 'javascript' => '');

  // Save and clean the shutdown callbacks array because it is static cached
  // and will be changed by the test run. Otherwise it will contain callbacks
  // from both environments and the testing environment will try to call the
  // handlers defined by the original one.
  $callbacks = &drupal_register_shutdown_function();
  $callbacks = array();

  // Reset all statics and variables to perform tests in a clean environment.
  $conf = array();
  drupal_static_reset();

  // Preset the 'install_profile' system variable, so the first call into
  // system_rebuild_module_data() (in drupal_install_system()) will register
  // the test's profile as a module. Without this, the installation profile of
  // the parent site (executing the test) is registered, and the test
  // profile's hook_install() and other hook implementations are never invoked.
  $conf['install_profile'] = $profile;

  // Clear out the db.
  behat_testing_clean_database();

  // Perform the actual Drupal installation.
  include_once DRUPAL_ROOT . '/includes/install.inc';
  drupal_install_system();

  behat_testing_preload_registry();

  // Set path variables.
  $paths = behat_testing_setup_paths();

  // Include the testing profile.
  variable_set('install_profile', $profile);
  $profile_details = install_profile_info($profile, 'en');

  // Install the modules specified by the testing profile.
  module_enable($profile_details['dependencies'], FALSE);

  // Run the profile tasks.
  $install_profile_module_exists = db_query("SELECT 1 FROM {system} WHERE type = 'module' AND name = :name", array(
    ':name' => $profile,
  ))->fetchField();
  if ($install_profile_module_exists) {
    module_enable(array($profile), FALSE);
  }

  // Reset/rebuild all data structures after enabling the modules.
  behat_testing_reset_all();

  // Run cron once in that environment, as install.php does at the end of
  // the installation process.
  drupal_cron_run();

  // Ensure that the session is not written to the new environment and replace
  // the global $user session with uid 1 from the new test site.
  drupal_save_session(FALSE);
  // Login as uid 1.
  $user = user_load(1);

  // Restore necessary variables.
  variable_set('install_task', 'done');
  variable_set('clean_url', 1);
  variable_set('site_mail', 'simpletest@example.com');
  variable_set('date_default_timezone', date_default_timezone_get());

  // Set up English language.
  unset($conf['language_default']);
  $language = language_default();

  behat_testing_setup_mail();

  drupal_set_time_limit(120);
}

/**
 * Removed prefixed tables from the database that are left
 * over from crashed tests.
 */
function behat_testing_clean_database() {
  $tables = db_find_tables('_st99%');
  foreach ($tables as $table) {
    // Strip the prefix and skip tables without digits following "_st",
    // e.g. {_st_test_id}.
    if (preg_match('/_st\d+(.*)/', $table, $matches)) {
      db_drop_table($matches[1]);
    }
  }
}

/**
 * Reset all testing variables.
 */
function behat_testing_reset_all() {
  // Reset all static variables.
  drupal_static_reset();
  // Reset the list of enabled modules.
  $modules = module_list(TRUE);

  // Reset cached schema for new database prefix. This must be done before
  // drupal_flush_all_caches() so rebuilds can make use of the schema of
  // modules enabled on the cURL side.
  drupal_get_schema(NULL, TRUE);

  // Perform rebuilds and flush remaining caches.
  drupal_flush_all_caches();

  // Reload global $conf array and permissions.
  behat_testing_refresh_variables();
  behat_testing_check_permissions(array(), TRUE);
}

/**
 * Refresh all testing variables.
 */
function behat_testing_refresh_variables() {
  global $conf;
  cache_clear_all('variables', 'cache_bootstrap');
  $conf = variable_initialize();
}

/**
 * Check to make sure that the array of permissions are valid.
 *
 * @param array $permissions
 *   Permissions to check.
 * @param boolean $reset
 *   Reset cached available permissions.
 *
 * @return boolean
 *   TRUE or FALSE depending on whether the permissions are valid.
 */
function behat_testing_check_permissions(array $permissions, $reset = FALSE) {
  $available = &drupal_static(__FUNCTION__);

  if (!isset($available) || $reset) {
    $available = array_keys(module_invoke_all('permission'));
  }

  $valid = TRUE;
  foreach ($permissions as $permission) {
    if (!in_array($permission, $available)) {
      throw Exception(t('Invalid permission %permission.', array('%permission' => $permission)), t('Role'));
      $valid = FALSE;
    }
  }
  return $valid;
}

/**
 * Get a variable from db, bypass local cache.
 */
function behat_testing_variable_get($name, $default = NULL) {
  global $conf;

  $value = db_query('SELECT value FROM {variable} WHERE name=:name', array(':name' => $name))->fetchField();

  if (!empty($value)) {
    $conf[$name] = unserialize($value);
    return $conf[$name];
  }

  return $default;
}
