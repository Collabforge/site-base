
<?php

function meta_group_node_insert($node) {
	if (!in_array($node->type, array('conversation', 'knowledge_object'))) {
		return;
	}
	if (!$group = meta_group_get_group($node->nid)) {
		return false;
	}
	if (module_exists('meta_email')) {
		meta_email_callback_group_content_added($group->nid, $node->nid);
	}
}

/**
 * Implementation of hook_og_membership_update()
 * Just for backward compatibility.
 * @TODO should be removed for a fresh product.
 */
function meta_group_og_membership_update(OgMembership $og_membership) {
  // Group Type must be node and enity type must be user.
  if ($og_membership->group_type != 'node' || $og_membership->entity_type != 'user') {
    return;
  }
	$gid = $og_membership->gid;
	$uid = $og_membership->etid;
	_meta_group_og_membership_update($gid, $uid);
}

/**
 * Implementation of hook_og_membership_insert() 
 */
function meta_group_og_membership_insert(OgMembership $og_membership) {
  // Group Type must be node and enity type must be user.
  if ($og_membership->group_type != 'node' || $og_membership->entity_type != 'user') {
    return;
  }
	$gid = $og_membership->gid;
	$uid = $og_membership->etid;
  _meta_group_og_membership_update($gid, $uid);

  $mid = $og_membership->id;
  $og_state = $og_membership->state;
  // $og_state is one of: OG_STATE_ACTIVE, OG_STATE_PENDING, OG_STATE_BLOCKED

  // if (function_exists('meta_og_state_is_draft')) {
  //   $group = meta_group_get_group($gid);
  //   if (meta_og_state_is_draft($gid)) {
  //     drupal_set_message(t('%title is now @state and still <em>in draft</em>. You need to press <strong>Submit for revision</strong> to have it published.', array(
  //       '%title' => $group->title,
  //       '@state' => meta_group_og_state_title($og_state),
  //     )));
  //   }
  //   else {
  //     //drupal_set_message(t('%title is published and @state.', array(
  //     //  '%title' => $group->title,
  //     //  '@state' => meta_group_og_state_title($og_state),
  //     //)));
  //   }
  // }
	meta_email_callback_user_joined($gid, $uid, $mid, $og_state);
}

/**
 * Return a text equivalent of the Organic Groups status code.
 * 
 * @param int $state
 *   Code as used by Organic Groups module
 * @return string
 *   I18n string, one of 'active', 'pending' or 'blocked'
 */
function meta_group_og_state_title($og_state) {
  $titles = og_group_content_states();
  return strtolower($titles[$og_state]);
}

function _meta_group_og_membership_update($gid, $uid) {
	$node = node_load($gid);
	if ($node->uid == $uid) {
		_meta_group_role_admin_grant($gid, $uid);
	}
}

function _meta_group_role_admin_grant($gid, $uid) {
	$rid = _meta_group_get_rid_by_role_name($gid, OG_ADMINISTRATOR_ROLE);
	og_role_grant('node', $gid, $uid, $rid);
}

/**
 * Implementation of hook_theme_registry_alter()
 */
function meta_group_theme_registry_alter(&$theme_registry) {
	$path = drupal_get_path('module', 'meta_group') . '/templates';
	// add templates directory to Drupal default directories
	$theme_registry += drupal_find_theme_templates($theme_registry, '.tpl.php', $path);
}

/**
 * Implements hook_views_api().
 */
function meta_group_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'meta_group') . '/includes/views',
  );
}

/**
 * Implements hook_og_user_access_alter()
 */
function meta_group_og_user_access_alter(&$permissions, $context) {
	if ($context['group_type'] == 'node') {
		$node = $context['group'];
		$group_is_closed = meta_group_is_closed($node);
		$permissions['subscribe'] = TRUE;
		$permissions['subscribe without approval'] = !$group_is_closed;
	}
}

function meta_group_is_closed($node) {
	$wrapper = entity_metadata_wrapper('node', $node);
	if (!isset($wrapper->{META_OG_ACCESS_FIELD})) {
		return FALSE;
	}
	return $wrapper->{META_OG_ACCESS_FIELD}->value() == META_OG_ACCESS_CLOSE;
}

function meta_group_menu() {
	$items = array();

	$items['your-hubs'] = array(
	    'title' => 'Your Hubs',
	    'description' => 'Hubs you have hosted or joined',
	    'page callback' => '_meta_group_page_profile_hubs',
	    'access callback' => 'user_access',
      'access arguments' => array('create conversation content'),
	);

	// Pages for a Group
	$items['node/%node/topics'] = array(
	    'title' => 'Topics',
	    'description' => 'Topics within this hub',
	    'page callback' => '_meta_group_page_topics',
	    'page arguments' => array(1),
	    'access callback' => '_meta_group_user_access_group',
	    'access arguments' => array(1)
	);
	$items['node/%node/library'] = array(
	    'title' => 'Library',
	    'description' => 'Library of this hub',
	    'page callback' => '_meta_group_page_library',
	    'page arguments' => array(1),
	    'access callback' => '_meta_group_user_access_group',
	    'access arguments' => array(1)
	);
	$items['node/%node/members'] = array(
	    'title' => 'Members',
	    'description' => 'This Hub\'s members',
	    'page callback' => '_meta_group_page_members',
	    'page arguments' => array(1),
	    'access callback' => '_meta_group_user_access_group',
	    'access arguments' => array(1)
	);
	$items['node/%node/books'] = array(
	    'title' => 'Books',
	    'description' => 'Books related to this group',
	    'page callback' => '_meta_group_books',
	    'page arguments' => array(1),
	    'access callback' => '_meta_group_user_access_group',
	    'access arguments' => array(1)
	);

	// Functionalities for a Group
	$items['node/%node/add/member'] = array(
	    'title' => 'Add a member',
	    'description' => '',
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('meta_group_add_user_form', 1),
	    'access callback' => 'meta_group_add_user_access',
	    'access arguments' => array(1),
	);
	$items['node/%node/add/member/co-owner'] = array(
	    'title' => 'Invite new Team Members',
	    'description' => '',
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('meta_group_add_user_form', 1, 'co-owner'),
	    'access callback' => 'meta_group_add_user_access',
	    'access arguments' => array(1, 'co-owner'),
	);
	$items['node/%node/add/member/sponser'] = array(
	    'title' => 'Invite Sponser',
	    'description' => '',
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('meta_group_add_user_form', 1, 'sponser'),
	    'access callback' => 'meta_group_add_user_access',
	    'access arguments' => array(1, 'sponser'),
	);
	$items['node/%node/add/member/ia-member'] = array(
	    'title' => 'Invite Implementing Area Member',
	    'description' => '',
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('meta_group_add_user_form', 1, 'ia-member'),
	    'access callback' => 'meta_group_add_user_access',
	    'access arguments' => array(1, 'ia-member'),
	);
	$items['node/%node/send-for-revision'] = array(
	    'title' => 'Submit for Review',
	    'description' => '',
	    'page callback' => 'meta_group_send_for_revision_page',
	    'page arguments' => array(1),
	    'access callback' => 'meta_group_send_for_revision_access',
	    'access arguments' => array(1),
	);

	return $items;
}

function meta_group_send_for_revision_access($node) {
	// @FIXME
	return TRUE;
}

function meta_group_send_for_revision_page($node) {
	// @TODO better to show a page and asks for a confirmation.
	drupal_set_message(t('An email has been sent to the Community Manager. You will be notified as soon as a decision is made on your Idea.'));
	global $user;
	meta_email_send_send_for_revision($node->nid, $user->uid);
	drupal_goto(sprintf('node/%d', $node->nid));
}

/**
 * Implements hook_node_access()
 */
function meta_group_node_access($node) {
	if (is_object($node)) {
		if ($node->type == 'hub') {
			return !_meta_group_user_access_group($node) ? NODE_ACCESS_DENY : NODE_ACCESS_IGNORE;
		}
	}
	return NODE_ACCESS_IGNORE;
}
/**
 * a helper function which checks if the user has general access to a group or not
 */
function _meta_group_user_access_group($node, $account=NULL) {
	global $user;
	if (!isset($account)) {
		$account = user_load($user->uid);
	}
	if (!isset($node->nid)) {
		return FALSE;
	}
	if (!og_is_group('node', $node)) {
		return FALSE;
	}
	$gid = $node->nid;

	if (!meta_group_is_closed($node)) {
		return TRUE;
	}

	// @TODO should check for $node->status?
	if (user_access('administer group', $account)) {
		return TRUE;
	}
	if (og_is_member('node', $gid, 'user', $account)) {
		return TRUE;
	}
	return FALSE;
}


function _meta_group_page_profile_hubs() {
  global $user;

  $is_admin = in_array($user->uid, array_keys(meta_group_get_admins()));

  $groups_hosted = views_embed_view('meta_membership_list_group_by_user', 'owned');
	$groups_joined = views_embed_view('meta_membership_list_group_by_user', 'list');
  
  $content = t('<h2>Hubs you joined</h2> !groups_joined<h2>Hubs you host</h2> !groups_hosted', array(
    '!groups_joined' => $groups_joined,
    '!groups_hosted' => $groups_hosted,
  ));
  if ($is_admin) {
    $groups_in_draft = views_embed_view('meta_node_list_hub', 'list');
    $content .= t('<h2>Hubs you may publish</h2> !groups_in_draft', array(
      '!groups_in_draft' => $groups_in_draft,
    ));
  }
  if (!strpos($groups_hosted, 'nothing') || $is_admin) {
    $members_pending = views_embed_view('og_members_admin2');
    $content .= t('<h2>Hubs with pending or blocked members</h2> !members_pending', array(
      '!members_pending' => $members_pending,
    ));
  }
	return $content;
}

function _meta_group_page_topics($node) {
	return views_embed_view('join_the_conversation', 'topics_of_hub', $node->nid);
}

function _meta_group_page_library($node) {
  return views_embed_view('recent_files', 'library_in_hub', $node->nid);
}

function _meta_group_page_members($node) {
  return views_embed_view('meta_user_list_by_group', 'members_all', $node->nid);
}

function _meta_group_books($node) {
  return views_embed_view('wikibooks', 'books_of_hub', $node->nid);
}

function meta_group_theme($existing, $type, $theme, $path) {
  return array(
      'group_actions_template' => array(
        'template' => 'group-actions-template',
        'variables' => array(
        	'gid' => 0
        )
     ),
  ); 
}

/**
 * Implements hook_block_info().
 *
 */
function meta_group_block_info() {
	$blocks = array();
	$blocks['group_actions'] = array(
		'info' => t('Actions for a specific Group')
		, 'cache' => DRUPAL_NO_CACHE,
	);
	return $blocks;
}

/**
 * Implements hook_block_view().
 */
function meta_group_block_view($delta = '') {
	switch ($delta) {
		case 'group_actions':
			$node = menu_get_object();
			if (!isset($node->nid)) {
				return;
			}
			if (!og_is_group('node', $node->nid)) {
				return;
			}
			$gid = $node->nid;
			$block['subject'] = NULL;
			$content = theme('group_actions_template', array('gid' => $gid));
			
			//$content .= _meta_group_block_actions($gid);

			$block['content'] = $content;
		break;
	}
	return $block;
}

function meta_group_preprocess_group_actions_template(&$variables) {
	
	$gid = $variables['gid'];
	$links = array();

	$is_admin = user_access('administer group') || og_user_access('node', $gid, 'administer group');

	$is_owner = meta_group_is_owner($gid);


    if ($is_owner and meta_og_state_is_draft($gid)) {
    	$links[] = array(
    		'href' => sprintf('node/%d/send-for-revision', $gid)
    		, 'title' => 'Submit for review'
    		, 'icon' => 'upload'
    		, 'classes' => array()
    	);
    }

	
	// ** Edit the group
	// If:
	//	- The user has general 'administer groups' permission
	//  - Or the user is the owner and the hub is still in draft
	// 
    if (user_access('administer group') or og_user_access('node', $gid, 'administer group') or ($is_owner and meta_og_state_is_draft($gid))) {
    	$links[] = array(
    		'href' => sprintf('node/%d/edit', $gid)
    		, 'title' => 'Edit the Hub'
    		, 'icon' => 'edit'
    		, 'classes' => array()
    	);
    }


    // ** Add a Sponser
	// If:
	//	- user has 'administer group' permission ('administrator role' of the group or the Content Manager with that permission)
	// 
	if (og_user_access('node', $gid, 'administer group')) {
    	$links[] = array(
    		'href' => sprintf('node/%s/add/member/sponser', $gid)
    		, 'title' => 'Invite Sponser'
    		, 'icon' => 'cog'
    	);
	}

	// ** Add a Implementing Area Member
	// If:
	//	- user has 'administer group' permission ('administrator role' of the group or the Content Manager with that permission)
	// 
	if (og_user_access('node', $gid, 'administer group'))   {
    	$links[] = array(
    		'href' => sprintf('node/%s/add/member/ia-member', $gid)
    		, 'title' => 'Invite Implementing Area Member'
    		, 'icon' => 'cog'
    	);
	}

	// ** Add more co-owner
	// If:
	//	- user has 'administer group' permission ('administrator role' of the group or the Content Manager with that permission)
	// 
	if (user_access('administer group') or ($is_owner and meta_og_state_is_draft($gid))) {
    	$links[] = array(
    		'href' => sprintf('node/%s/add/member/co-owner', $gid)
    		, 'title' => 'Invite new Team Members'
    		, 'icon' => 'cog'
    	);
	}

	// ** Add a member
	// If:
	//	- user has 'add user' permission (should have been set for members)
	//  
	// if ((!module_exists('meta_og_state') or !meta_og_state_is_draft($gid)) and ($is_admin or og_user_access('node', $gid, 'add user'))) {
 //    	$links[] = array(
 //    		'href' => sprintf('node/%s/add/member', $gid)
 //    		, 'title' => 'Add a member'
 //    		, 'icon' => 'user'
 //    		, 'classes' => array('btn-success')
 //    	);
	// }

	// ** Subscribe to group
	// If:
	//	- user is not a member
	//  
	/* if (!og_is_member('node', $gid)) {
    	$links[] = array(
    		'href' => sprintf('group/node/%s/subscribe', $gid)
    		, 'title' => 'Join this hub'
    		, 'icon' => 'plus'
    		, 'classes' => array('btn-success')
    	);
	} */

	// ** Leave the group
	// If:
	//	- user is already a member
	//  
	if (!$is_owner and og_is_member('node', $gid)) {   
    	$links[] = array(
    		'href' => sprintf('group/node/%s/unsubscribe', $gid)
    		, 'title' => 'Unsubscribe from this Idea'
    		, 'icon' => 'remove'
    		, 'classes' => array('btn-danger')
    	);
	}

	$variables['links'] = $links;
}

/**
 * Access check for form meta_group_add_user_form
 * @see meta_group_add_user_form()
 */
function meta_group_add_user_access($node, $type='member') {
	if (!og_is_group('node', $node)) {
		return false;
	}
	$gid = $node->nid;
	global $user;
	$is_group_admin = og_user_access('node', $gid, 'administer group');
	if (user_access('administer group')) {
		return true;
	}
	if ($type == 'member' and og_user_access('node', $gid, 'add user')) {
		return true;
	}
	if ($type == 'co-owner' and og_user_access('node', $gid, 'add user')) {
		return true;
	}
	if ($type == 'sponser' and og_user_access('node', $gid, 'add user')) {
		return true;
	}
	if ($type == 'ia-member' and og_user_access('node', $gid, 'add user')) {
		return true;
	}
	return false;
}

/**
 * Implementation of form for sending a Group for revision
 * @param
 *  $type
 *   can be 'co-owner' or ''
 */
function meta_group_add_user_form($form, &$form_state, $node, $type='') {
	module_load_include('inc', 'og_ui', 'og_ui.admin');
	$form = og_ui_add_users($form, $form_state, 'node', $node->nid);
	$form['og_user']['roles']['#access'] = false;
	$form['membership_fields']['og_membership_request']['#access'] = false;
	$meta_roles = array();
	foreach ($form['og_user']['roles']['#options'] as $rid => $role_name) {
		if ($type == 'co-owner' and $role_name == OG_ADMINISTRATOR_ROLE) {
			$meta_roles[] = $rid;
			$form['og_user']['#title'] = "Invite new Team Member";			
		}
		if ($type == 'sponser' and $role_name == 'Sponser') {
			$meta_roles[] = $rid;
			$form['og_user']['#title'] = "Invite Sponser";			
		}
		if ($type == 'ia-member' and $role_name == 'Implementing Area Member') {
			$meta_roles[] = $rid;
			$form['og_user']['#title'] = "Invite Implementing Area Member";			
		}
		/* if email_registration is enabled then email is used as user name - hook implemented in collabco_forms */
		if (module_exists('email_registration') && module_exists('collabco_forms')) {
			$form['og_user']['name']['#title'] = "E-mail";
		}

	}
	$form_state['meta_roles'] = $meta_roles;
	return $form;
}

/**
 * Validate handler; Add users to group.
 */
function meta_group_add_user_form_validate($form, &$form_state) {
	og_ui_add_users_validate($form, $form_state);
}

/**
 * Submit handler; Add users to group.
 */
function meta_group_add_user_form_submit($form, &$form_state) {
	foreach ($form_state['meta_roles'] as $role) {
		$form_state['values']['roles'][$role] = $role;
	}
	og_ui_add_users_submit($form, $form_state);
}

/**
 * Helper functions
 */

/**
 * @return TRUE if the user is the owner
 */
function meta_group_is_owner($gid, $uid=NULL) {
  global $user;
  if (!og_is_group('node', $gid)) {
    return false;
  }
  if (!isset($uid)) {
  	$uid = $user->uid;
  }
  $node = node_load($gid);
  return ($uid == $node->uid);
}

/**
 * @return TRUE if the user is the owner or co-owner
 */
function meta_group_is_coowner($gid, $uid=NULL) {
	// @FIXME: implement the functionality
	global $user;
	if (isset($uid)) {
		$account = user_load($uid);
	} else {
		$account = $user;
	}
	return og_user_access('node', $gid, 'administer group', $account);
}

/**
 * @param $gid Gr
 *	Group id
 * @param $role_name
 * The role name; you could also use standard OG role names:
 * - OG_ADMINISTRATOR_ROLE
 * - OG_AUTHENTICATED_ROLE
 * - OG_ANONYMOUS_ROLE
 *
 * @return role id for a specified role 
 */
function _meta_group_get_rid_by_role_name($gid, $role_name) {
	$node = node_load($gid);
	$roles = og_roles('node', $node->type, $gid);
	foreach ($roles as $_rid=>$_rname) {
		if ($_rname == $role_name) {
			return $_rid;
		}
	}
	return;
}

// @TODO: should throw an exception in case of a fault?
function _meta_group_is_pending_member($gid, $account=NULL) {
	global $user;
	$node = node_load($gid);
	if (!isset($node->nid)) {
		return null;
	}
	if (!og_is_group('node', $node)) {
		return false;
	}
	if (!isset($account)) {
		$account = user_load($user->uid);
	}
	return og_is_member('node', $gid, 'user', $account, array(OG_STATE_PENDING));
}

/**
 * Checks if provided node id belongs to a Meta group node
 * @param
 *   $gid
 * @return
 *     TRUE in case it is the $node->nid for an actual Meta Group; otherwise returns FALSE
 */
function meta_group_is_group($gid) {
	return false != meta_group_get_group($gid);
}

/**
 * Returns the correspondant Group node after doing checks.
 * @return
 *     $node object if the checks are passed; otherwise returns FALSE
 */
function meta_group_get_group($gid) {
	$node = node_load($gid);
	if (!isset($node->nid)) {
		return FALSE;
	}
	if (!og_is_group('node', $node)) {
		return FALSE;
	}
	return $node;
}

/**
 * Returns the list of members for a specific group.
 */
function meta_group_get_group_members($gid) {
	$query = new EntityFieldQuery();
	$result = $query
		->entityCondition('entity_type', 'og_membership')
		->propertyCondition('group_type', 'node', '=')
		->propertyCondition('gid', $gid, '=')
		->propertyCondition('entity_type', 'user', '=')
		->execute();
	if (empty($result['og_membership'])) {
		return array();
	}
	$memberships = entity_load('og_membership', array_keys($result['og_membership']));
	$users = array();
	foreach ($memberships as $membership) {
		$users[] = user_load($membership->etid);
	}
	return $users;
}

/**
 * Returns the list of users that have permissions to administer groups.
 */
function meta_group_get_admins() {
	$query = db_select('role_permission', 'rp');
    $query->join('users_roles', 'ur', 'rp.rid = ur.rid');
	$result = $query
    ->fields('ur', array('uid'))
    ->condition('rp.permission', 'administer group', '=')
    ->execute()->fetchAll();
	$users = array();
	foreach ($result as $record) {
		$users[$record->uid] = user_load($record->uid);
	}
	return $users;
}

function meta_group_get_friendly_face($gid) {
	$query = db_select('og_role', 'ogr');
    $query->join('og_users_roles', 'our', 'ogr.rid = our.rid');
	$result = $query
    ->fields('our', array('uid'))
    ->condition('ogr.name', 'Friendly Face', '=')
    ->condition('our.gid',$gid)
    ->execute()->fetchAll();
	$users = array();
	foreach ($result as $record) {
		$users[$record->uid] = user_load($record->uid);
	}	
	return $users;
}










