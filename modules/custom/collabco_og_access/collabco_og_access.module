<?php

/**
 * @file
 * Enable access control for Open and Close groups and group content.
 */

/**
 * The access realm of group member.
 */
define('collabco_OG_ACCESS_REALM', 'collabco_og_access');

/**
 * Group public access field.
 */
define('collabco_OG_ACCESS_FIELD', 'collabco_group_access');


/**
 * Define group access as OPEN.
 */
define('collabco_OG_ACCESS_OPEN', 0);

/**
 * Define group access as CLOSE.
 */
define('collabco_OG_ACCESS_CLOSE', 1);


/**
 * Implements hook_node_grants().
 */
function collabco_og_access_node_grants($account, $op) {
  if ($op != 'view') {
    return;
  }
  $grants = array();
  if ($groups = og_get_entity_groups('user', $account)) {
    foreach ($groups as $group_type => $gids) {
      foreach ($gids as $gid) {
        $realm = collabco_OG_ACCESS_REALM . ':' . $group_type;
        $grants[$realm][] = $gid;
      }
    }
  }
  return $grants;
}


/**
 * Implements hook_node_access_records().
 */
function collabco_og_access_node_access_records($node) {
  if (empty($node->status)) {
    // Node is unpublished, so we don't allow every group member to see
    // it.
    return array();
  }
  // The group IDs, that in case access is granted, will be recorded.
  $gids = array();
  if (_collabco_og_access_has_close_group($node)) {
    $entity_groups = og_get_entity_groups('node', $node);
    $gids = array_merge_recursive($gids, $entity_groups);
  }
  $grants = array();
  foreach ($gids as $group_type => $values) {
    foreach ($values as $gid) {
      $grants[] = array (
        'realm' => collabco_OG_ACCESS_REALM . ':' . $group_type,
        'gid' => $gid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }
  }
  return $grants;
}

/**
 * Checking if the node is part of a Close group.
 */

function _collabco_og_access_has_close_group($node) {
  $entity_groups = og_get_entity_groups('node', $node);
  if (empty($entity_groups)) {
    return false;
  }
  foreach ($entity_groups as $group_type => $values) {
    entity_load($group_type, $values);
    foreach ($values as $gid) {
      $group_wrapper = entity_collabcodata_wrapper($group_type, $gid);
      if (!empty($group_wrapper->{collabco_OG_ACCESS_FIELD}) && $group_wrapper->{collabco_OG_ACCESS_FIELD}->value()) {
        return true;
      }
    }
  }
  return false;
}



/**
 * API Function 
*/
function collabco_og_state_is_open($gid) {
  $group_wrapper = entity_collabcodata_wrapper('node', $gid);
  if (isset($group_wrapper->{collabco_OG_ACCESS_FIELD})) {
    return $group_wrapper->{collabco_OG_ACCESS_FIELD}->value() == collabco_OG_ACCESS_OPEN;
  }
  return null;
}


/**
 * Implement hook_og_fields_info().
 */
function collabco_og_access_og_fields_info() {
  $allowed_values = array(
    collabco_OG_ACCESS_OPEN => 'Open - accessible to all site users',
    collabco_OG_ACCESS_CLOSE =>  'Close - accessible only to group members',
  );
  $items[collabco_OG_ACCESS_FIELD] = array(
    'type' => array('group'),
    'description' => t('Determine publicity state of a group.'),
    // Open state can be done only on node entity.
    'entity' => array('node'),
    'field' => array(
      'field_name' => collabco_OG_ACCESS_FIELD,
      'no_ui' => TRUE,
      'type' => 'list_boolean',
      'cardinality' => 1,
      'settings' => array('allowed_values' => $allowed_values, 'allowed_values_function' => ''),
    ),
    'instance' => array(
      'label' => t('Group publicity'),
      'required' => TRUE,
      // Default to open.
      'default_value' => array(0 => array('value' => collabco_OG_ACCESS_OPEN)),
      'widget_type' => 'options_select',
      'view modes' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'options_onoff',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'options_onoff',
        ),
      ),
    ),
  );

  return $items;
}
