<?php

/**
 * Implements hook_theme().
 */
function hub_theme($existing, $type, $theme, $path) {
  return array(
      'hub_header_template' => array(
        'template' => 'hub-header-template',
     ),
    'create_hub_from_topic_template' => array(
        'template' => 'create-hub-from-topic-template',
     ),
  );
}

/**
 * Implements hook_block_info().
 */
function hub_block_info() {
  $blocks = array();
  $blocks['hub_header'] = array(
    'info' => t('Header of Group view page'),
  ); 
  $blocks['create_hub_from_topic'] = array(
    'info' => t('Create a Group from this topic'),
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function hub_block_view($delta='') {
  $block = array();
  global $base_url, $user;
  // @TODO: Make sure if there is a better way. 

   $node = menu_get_object();
   if (!is_object($node)) {
       return false;
   }
 /*
   $nid = arg(1); 
   $node = node_load($nid); */
     
  switch($delta) {
        case 'hub_header':
          if (!empty($node) and $node->type == 'hub') {
            $content = theme('hub_header_template');
            $block['content'] = $content;
          }   
        break;
        case 'create_hub_from_topic':
          if (!empty($node) and $node->type == 'conversation') {
              $groups = og_get_entity_groups('node',$node);
              if (empty($groups) and $node->uid == $user->uid){         
                  $content = theme('create_hub_from_topic_template');
                  $block['content'] = $content;
              }           
          }   
        break;
  }
  return $block;
}

function template_preprocess_create_hub_from_topic_template(&$variables){

    //@FIXME: This should not be done here. This need a simple theme function not a template and a preprocessor
    $nid = intval(arg(1));
    if (!empty($nid)) {
       $variables['nid'] =  $nid; 
    }
    
}

 function template_preprocess_hub_header_template(&$variables) {
     
        $node = node_load(arg(1)); 
        //dpm($node);
  
	$field = field_get_items('node', $node, 'meta_group_access');
        $meta_group_access = field_view_value('node', $node, 'meta_group_access', $field[0]);
        $variables['meta_group_access'] =  $meta_group_access['#markup'];
        
        $field = field_get_items('node', $node, 'field_tag_line');
        $tag_line = field_view_value('node', $node, 'field_tag_line', $field[0]);
        $variables['tag_line']= $tag_line['#markup'];
       
        $variables['hub_title'] = $node->title;
      //template_preprocess_page($node);

        $links = array(
          'ui-header-menu ui-menu-hub-home' => array(
              'title' => 'Home'
              , 'href' => sprintf('node/%s', $node->nid)
          )
          , 'ui-header-menu ui-menu-hub-topics' => array(
              'title' => t('Discussions')
              , 'href' => sprintf('node/%s/topics', $node->nid)
          )
          , 'ui-header-menu ui-menu-hub-library' => array(
              'title' => 'Library'
              , 'href' => sprintf('node/%s/library', $node->nid)
          )
          , 'ui-header-menu ui-menu-hub-members' => array(
              'title' => 'Members'
              , 'href' => sprintf('node/%s/members', $node->nid)
          )
          , 'ui-header-menu ui-menu-hub-book' => array(
              'title' => t('WikiBooks')
              , 'href' => sprintf('node/%s/book', $node->nid)
          )
        );
        $attributes = array('class' => array('nav','nav-tabs'));
        

        $variables['links'] = theme('links', array(
          'links' => $links, 'attributes' => $attributes
        ));

}

function hub_preprocess_page(&$vars) {
       
       $node = menu_get_object();
       if (!empty($node) && $node->type == 'hub')
       {    
           drupal_set_title('');
           unset($vars[tabs]);
       }
} 

function hub_get_members_count($gid) {       
    $result = db_select('og_membership','og')
      ->fields('og')  
      ->condition('og.entity_type','user','=')
      ->condition('og.gid', $gid, '=')
      ->execute();
    $num_of_results = $result->rowCount();   
    return $num_of_results;
}



